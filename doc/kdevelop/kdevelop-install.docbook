<appendix id="kdevelop-install">

<appendixinfo>
  <authorgroup>
    <author><firstname>Bernd</firstname><surname>Pol</surname></author>
    <!-- ROLES_OF_TRANSLATORS -->
  </authorgroup>
</appendixinfo>

<title>Installing &kdevelop;</title>

<indexterm zone="kdevelop-install">
  <primary>installation</primary></indexterm>

<para>
In this chapter we will discuss the steps necessary to compile and install the &kdevelop; IDE:

<itemizedlist>
  <listitem><para>
  <link linkend="kdevelop-install-howto">How to obtain &kdevelop;</link> mainly concentrates on downloading the most recent &kdevelop; sources from CVS.
  </para></listitem>
  <listitem><para>
  <link linkend="requirements">&kdevelop; requirements</link> lists the programs and libraries which you need installed to successfully compile the IDE.
  </para></listitem>
  <listitem><para>
  <link linkend="compile-and-install">&kdevelop; compilation and installation</link> leads you through all the steps of compilation and installation of the application.
  </para></listitem>
  <listitem><para>
<link linkend="make-api">How to obtain a &kdevelop; &API; documentation</link> tells what an API is and how you get such a useful tool for navigating the &kdevelop; sources.
  </para></listitem>
</itemizedlist>
</para>

<sect1 id="kdevelop-install-howto">
<title>How to Obtain &kdevelop;</title>

<indexterm zone="kdevelop-install-howto">
  <primary>obtain &kdevelop;</primary></indexterm>
<indexterm zone="kdevelop-install-howto">
  <primary>&kdevelop;</primary>
  <secondary>obtain</secondary></indexterm>

<para>
&kdevelop; is available in binary form from many different &Linux; distributions such as <!--&SuSE;, &RedHat;//--> SuSE, RedHat and others. These binaries are packed in some convenient format, mostly RPM, for easy installation. To install, follow the standard instructions given in your distribution.
</para>
<para>
You may as well obtain the &kdevelop; sources, compile and install them by yourself. These sources can be found via the project home page at <ulink url="http://www.kdevelop.org"> http://www.kdevelop.org</ulink> or via the <ulink url="http://download.kde.org">&kde; ftp site</ulink>.
</para>

<sect2 id="howto-cvs">
<title>Get Daily &kdevelop; Snapshots from &CVS;</title>

<indexterm zone="howto-cvs">
  <primary>CVS</primary></indexterm>

<para>If you want be in front of current development, anonymous &CVS; repository snapshots are available.  The module name is <emphasis>kdevelop</emphasis> at <filename class="directory">:pserver:anonymous@anoncvs.kde.org:/home/kde</filename>.
</para>

<sect3 id="howto-cvs-co">
<title>Initial &CVS; Checkout</title>

<indexterm zone="howto-cvs-co">
  <primary>checkout</primary></indexterm>
<indexterm zone="howto-cvs-co">
  <primary>&kdevelop;</primary>
  <secondary>CVS</secondary>
  <tertiary>checkout</tertiary></indexterm>

<para>
To obtain an initial version of &kdevelop; you must download it from anonymous &CVS;.  For this so-called <emphasis>checkout</emphasis> operation follow these steps.
</para>

<note><para>
We assume you want to put your &kdevelop; copy into the <filename class="directory">kde3src</filename> subdirectory of your home directory (<filename class="directory">~</filename>).
</para></note>

<informalexample><simplelist>
  <member>
  # Create the destination directory, if necessary:
  </member>
  <member>
    <prompt>~&gt; </prompt>
    <userinput>mkdir kde3src</userinput>
  </member>
  <member>
    <prompt>~&gt; </prompt>
    <userinput>cd kde3src</userinput>
  </member>
  <member>
    <prompt>~/kde3src&gt; </prompt>
    <userinput>cvs -z3 -d :pserver:anonymous@anoncvs.kde.org:/home/kde co kdevelop</userinput>
  </member>
  <member>
    <prompt>~/kde3src&gt; </prompt>
    <userinput>cd kdevelop</userinput>
  </member>
</simplelist></informalexample>

<note><para>
  Once you have successfully checked out your &kdevelop; version, you may keep up with the changes using the update procedure shown in the next section.
</para></note>

<important><para>
  Keep the server load low. <emphasis>Please do not checkout every time you want to keep your &kdevelop; up to date!</emphasis> Use CVS update for this purpose.
</para></important>

<para>
Now you may compile your &kdevelop; version as shown in the <link linkend="compile-and-install">&kdevelop; Compilation and Installation</link> section.
</para>

</sect3> <!-- howto-cvs-co -->

<sect3 id="howto-cvs-up">
<title>Keeping Your &CVS; Copy up to Date</title>

<indexterm zone="howto-cvs-up">
  <primary>update</primary></indexterm>
<indexterm zone="howto-cvs-up">
  <primary>&kdevelop;</primary>
  <secondary>CVS</secondary>
  <tertiary>update</tertiary></indexterm>

<para>
After you checked out (and successfully compiled) &kdevelop; from CVS as shown above, you'll want to keep it up to date in order to get all the patches. Follow these steps. (We again assume you have put your &kdevelop; copy into the <filename class="directory">kde3src</filename> directory.)
</para>
<para>
Note the <command>up</command> (= <emphasis>update</emphasis>) command instead of the <command>co</command> (which stands for <emphasis>checkout</emphasis>).
</para>

<informalexample><simplelist>
  <member>
    <prompt>~&gt; </prompt>
    <userinput>cd kde3src</userinput>
  </member>
  <member>
    <prompt>~/kde3src&gt; </prompt>
    <userinput>cvs -z3 -d :pserver:anonymous@anoncvs.kde.org:/home/kde up kdevelop</userinput>
  </member>
  <member>
    <prompt>~/kde3src&gt; </prompt>
    <userinput>cd kdevelop</userinput>
  </member>
</simplelist></informalexample>

<note><para>
Keep an eye on the messages &CVS; produces during the update sequence. The exact steps in the compilation sequence depend on this.
</para></note>

<para>
Now you can compile a new &kdevelop; version as shown in the <link linkend="compile-and-install-make-cvs">Special &CVS; compilation considerations</link> chapter.
</para>
</sect3> <!-- howto-cvs-up -->

</sect2> <!-- howto-cvs -->

</sect1> <!-- howto -->

<!-- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -->

<sect1 id="requirements">
<title>&kdevelop; Requirements</title>

<indexterm zone="requirements">
  <primary>requirements</primary></indexterm>
<indexterm zone="requirements">
  <primary>&kdevelop;</primary>
  <secondary>requirements</secondary></indexterm>
<indexterm zone="requirements">
  <primary>GNU</primary>
  <secondary>requirements</secondary></indexterm>

<para>
In order to successfully compile and use &kdevelop;, you need the following programs and libraries. They are available on most platforms as distribution packages and thereby can be installed easily.
</para>

<itemizedlist>
<title>Required:</title>
  <listitem>
  <para>
    <application>gcc/g++</application> &ge; 2.95.3 (or compatible)
    <indexterm>
      <primary>gcc</primary>
      <secondary>requirements</secondary></indexterm>
    <indexterm>
      <primary>g++</primary>
      <secondary>requirements</secondary></indexterm>
  </para>
  <para>
  Available from <ulink url="gcc.gnu.org">gcc.gnu.org</ulink>
  </para>
  </listitem>
  <listitem>
  <para>
    <application>&GNU; make</application> (or compatible)
    <indexterm>
      <primary>make</primary>
      <secondary>requirements</secondary></indexterm>
  </para>
  <para>
  Available from <ulink url="www.gnu.org/software/make">www.gnu.org/software/make</ulink>
  </para>
  </listitem>
  <listitem>
  <para>
    &perl; 5.004 (or higher)
    <indexterm>
      <primary>Perl</primary>
      <secondary>requirements</secondary></indexterm>
  </para>
  <para>
  Available from <ulink url="www.perl.com">www.perl.com</ulink>
  </para>
  </listitem>
  <listitem>
  <para>
    <application>autoconf</application> &ge; 2.52 (or higher)
    <indexterm>
      <primary>autoconf</primary>
      <secondary>requirements</secondary></indexterm>
  </para>
  <para>
  Available from <ulink url="www.gnu.org/software/autoconf">www.gnu.org/software/autoconf</ulink>
  </para>
  </listitem>
  <listitem>
  <para>
    <application>automake</application> &ge; 1.6 (or higher)
    <indexterm>
      <primary>automake</primary>
      <secondary>requirements</secondary></indexterm>
  </para>
  <para>
  Available from <ulink url="www.gnu.org/software/automake">www.gnu.org/software/automake</ulink>
  </para>
  </listitem>
  <listitem>
  <para>
    <application>flex</application> 2.5.4 (or higher)
    <indexterm>
      <primary>flex</primary>
      <secondary>requirements</secondary></indexterm>
  </para>
  <para>
  Available from <ulink url="www.gnu.org/software/flex">www.gnu.org/software/flex</ulink>
  </para>
  </listitem>
  <listitem>
  <para>
    &Qt; &ge; 3.0.3 (or higher)
    <indexterm>
      <primary>Qt</primary>
      <secondary>requirements</secondary></indexterm>
  </para>
  <para>
  Available from <ulink url="www.trolltech.com/products/qt">www.trolltech.com/products/qt</ulink>
  </para>
  </listitem>
  <listitem>
  <para>
    <application>KDE</application> &ge; 3.0.2 (or higher)
    <indexterm>
      <primary>KDE</primary>
      <secondary>requirements</secondary></indexterm>
  </para>
  <para>
  Available from <ulink url="www.kde.org">www.kde.org</ulink>
  </para>
  </listitem>
</itemizedlist>

<itemizedlist>
<title>Optional:</title>
  <listitem><para>
    The <emphasis><application>ctags</application></emphasis> source navigation tool, from <ulink url="http://ctags.sourceforge.net">http://ctags.sourceforge.net</ulink>, which enables you fast access to declarations and definitions by a few simple clicks on a name in the editor.
    <indexterm><primary>ctags</primary></indexterm>
  </para></listitem>
  <listitem><para>
    <emphasis><application>dot</application></emphasis>, a graphics language compiler, from <ulink url="http://www.graphviz.org">http:/www.graphviz.org</ulink>. This
  <!-- ### temporarily disabled until the graphical class browser works again
  allows you to navigate in a graphical view of your classes' dependencies. Likewise the <application>dot</application> //-->
  tool is needed in conjunction with &doxygen; below if you want to have class relationships graphically displayed (which is highly recommended).
    <indexterm><primary>dot</primary></indexterm>
  </para></listitem>
  <listitem><para>
    The <emphasis>&doxygen;</emphasis> documentation tool, from <ulink url="http://www.doxygen.org">http://www.doxygen.org</ulink> if you want to generate concise and powerful API documentation from your projects.
    <indexterm><primary>doxygen</primary></indexterm>
  </para></listitem>
  <listitem><para>
    <emphasis><application>valgrind</application></emphasis> from <ulink url="http://developer.kde.org/~sewardj/">http://developer.kde.org/~sewardj/</ulink> helps you to find memory management problems in your applications.
    <indexterm><primary>valgrind</primary></indexterm>
  </para></listitem>
  <listitem><para>
    <emphasis><application>CVS</application></emphasis> from <ulink url="http://www.cvshome.org">http://www.cvshome.org</ulink> if you want to use the &CVS; versioning system.
    <indexterm>
      <primary>CVS</primary>
      <secondary>requirements</secondary></indexterm>
  </para></listitem>
  <listitem><para>
  Any other compiler and/or tool in case you want to develop for another language/platform than C++/&kde; or use some special facility.
  </para></listitem>
</itemizedlist>

<note>
<orderedlist>
  <listitem>
    <para>
    You can, to a certain extent, circumvent the need for &autoconf; &ge; 2.52 and &automake; &ge; 1.6. Just remove the <filename class="directory">admin</filename> directory in your &kdevelop; installation directory and type
    <indexterm>
      <primary>autoconf</primary>
      <secondary>circumvent version need</secondary></indexterm>
    <indexterm>
      <primary>automake</primary>
      <secondary>circumvent version need</secondary></indexterm>
    <indexterm>
      <primary>version need</primary>
      <secondary>circumvent for autoconf/automake</secondary></indexterm>
    </para>
    <informalexample><simplelist>
      <member><prompt>(your-kdevelop-directory)&gt; </prompt>
      <userinput>ln -s $KDEDIR/share/apps/kdelibs/admin admin</userinput></member>
    </simplelist></informalexample>
    <para>
    at the console. This causes &kdevelop; to use the standard settings in the &kde; <filename class="directory">admin</filename> directory instead.
    </para>
  </listitem>
  <listitem>
    <para>
    Be careful <emphasis>not to mix &Qt; versions</emphasis>. Always link &kdevelop; to the same &Qt; version your &kde; library was compiled. Otherwise you will most likely experience <emphasis>very strange</emphasis> behaviours.
    </para>
  </listitem>
</orderedlist>
</note>

</sect1> <!-- requirements -->

<!-- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -->

<sect1 id="compile-and-install">
<title>&kdevelop; Compilation and Installation</title>

<indexterm zone="compile-and-install">
  <primary>&kdevelop;</primary>
  <secondary>compilation</secondary></indexterm>
<indexterm zone="compile-and-install">
  <primary>&kdevelop;</primary>
  <secondary>installation</secondary></indexterm>

<para>
Once all requirements are met, you are ready to compile and install &kdevelop;. This appendix will discuss the necessary steps to do so.
</para>
<itemizedlist>
  <listitem><para>
  <link linkend="compile-and-install-preliminaries">Preliminary Steps</link> tells you about setting up a proper environment.
  </para></listitem>
  <listitem><para>
  <link linkend="compile-and-install-make">Compile &kdevelop;</link> deals with obtaining the &kdevelop; sources from &cvs;, how to prepare them for the installation process, and finally shows the steps necessary to compile and install &kdevelop;.
  </para></listitem>
  <listitem><para>
  <link linkend="compile-and-install-options">Some Notes on configure Options</link> tells you how to run &kdevelop; if it has been installed in a location other than the &kde; directory.
  </para></listitem>
</itemizedlist>

<sect2 id="compile-and-install-preliminaries">
<title>Preliminary Steps</title>

<indexterm zone="compile-and-install-preliminaries">
  <primary>preliminaries</primary>
  <secondary>&kdevelop; installation</secondary></indexterm>
<indexterm zone="compile-and-install-preliminaries">
  <primary>KDEDIR</primary></indexterm>
<indexterm zone="compile-and-install-preliminaries">
  <primary>QTDIR</primary></indexterm>
<indexterm zone="compile-and-install-preliminaries">
  <primary>LD_LIBRARY_PATH</primary></indexterm>
<indexterm zone="compile-and-install-preliminaries">
  <primary>LIBRARY_PATH</primary></indexterm>
<indexterm zone="compile-and-install-preliminaries">
  <primary>PATH</primary></indexterm>

<para>
Before entering the compile sequence you must make sure all libraries and tools are available to the make system. To accomplish this some environment variables need to be properly set. The actual steps to be performed depend on the console shell you use.
</para>

<note><para>
To avoid typing in all the statements that set the necessary environment variables every time you want to compile, you should put them into your <filename>.bashrc</filename> or <filename>.cshrc</filename> file. This way the environment variables will be properly set every time you start the shell.
</para></note>

<sect3 id="compile-and-install-preliminaries-bash">
<title>Setting the Environment for the bash Shell</title>

<para>
If you use the bash shell add the following lines:
</para>

<informalexample><simplelist>
  <member><userinput>export KDEDIR=</userinput>(path to your KDE installation)</member>
  <member><userinput>export QTDIR=</userinput>(path to your Qt library)</member>
  <member><userinput>export LD_LIBRARY_PATH=$QTDIR/lib:$KDEDIR/lib:$LD_LIBRARY_PATH</userinput></member>
  <member><userinput>export LIBRARY_PATH=$QTDIR/lib:$KDEDIR/lib:$LIBRARY_PATH</userinput></member>
  <member><userinput>export PATH=$QTDIR/bin:$KDEDIR/bin:$PATH</userinput></member>
</simplelist></informalexample>
<para></para>

</sect3> <!-- compile-and-install-preliminaries-bash -->

<sect3 id="compile-and-install-preliminaries-tcsh">
<title>Setting the Environment for the tcsh Shell</title>

<para>
If you use the tcsh shell add the following lines:
</para>
<para>
<informalexample><simplelist>
  <member><userinput>setenv KDEDIR </userinput>(path to your KDE installation)</member>
  <member><userinput>setenv QTDIR </userinput>(path to your Qt library)</member>
  <member><userinput>setenv LD_LIBRARY_PATH=$QTDIR/lib:$KDEDIR/lib:$LD_LIBRARY_PATH</userinput></member>
  <member><userinput>setenv LIBRARY_PATH $QTDIR/lib:$KDEDIR/lib:$LIBRARY_PATH</userinput></member>
  <member><userinput>setenv PATH $QTDIR/bin:$KDEDIR/bin:$PATH</userinput></member>
</simplelist></informalexample>
</para>

</sect3> <!-- compile-and-install-preliminaries-tcs -->

</sect2> <!-- compile-and-install-preliminaries -->

<sect2 id="compile-and-install-make">
<title>Compile &kdevelop;</title>

<indexterm zone="compile-and-install-make">
  <primary>make</primary>
  <secondary>&kdevelop; installation</secondary></indexterm>
<indexterm zone="compile-and-install-make">
  <primary>compiling</primary>
  <secondary>&kdevelop;</secondary></indexterm>

<note><para>
In the following discussion we assume that you have put your &kdevelop; sources in the <filename class="directory">~/kde3src/kdevelop</filename> directory.
</para></note>

<sect3 id="compile-and-install-make-cvs">
<title>Special &CVS; Compilation Considerations</title>

<para>
In case you use a &kdevelop; snapshot from &CVS; the initial compilation steps depend on whether you just did a complete checkout or only updated the source.
</para>

<variablelist>
<varlistentry>
<term id="compile-and-install-make-cvs-co">After a CVS Checkout</term>
<listitem>
<para>
You must <emphasis>initialize the make system</emphasis> after a fresh checkout. The same is true every time you need to start over from scratch. Type:
</para>

<informalexample><simplelist><member>
  <prompt>~/kde3src/kdevelop&gt; </prompt>
  <userinput>make -f admin/Makefile.common cvs-clean</userinput>
</member></simplelist></informalexample>
<para>
and then <emphasis>all of the following steps</emphasis>.
</para>
<note><para>
You might need access to the &CVS; repository for the clean-up if any corrupted or missing files must be reconstructed.
</para></note>
<important><para>
The <command>cvs-clean</command> command will <emphasis>remove every file</emphasis> not in &CVS; from the directory! Make sure to back up any valuable information before you issue this clean-up command.
</para></important>
</listitem>
</varlistentry>

<varlistentry>
<term id="compile-and-install-make-cvs-up">After a CVS Update</term>
<listitem>
<para>
The next step depends on the output of the &CVS; update sequence. If you got something like (there may be a U or a P marker in the leftmost column, both denoting the file has been changed):
</para>

<screen>
U /some_directory_path/Makefile.am
</screen>
<para>
or if you just did a full checkout, you must enter:
</para>
<informalexample><simplelist><member>
  <prompt>~/kde3src/kdevelop&gt; </prompt>
  <userinput>make -f Makefile.cvs</userinput>
</member></simplelist></informalexample>
<para>
before you proceed with <emphasis>all of the following steps</emphasis>.
</para>
</listitem>
</varlistentry>
</variablelist>
</sect3> <!-- compile-and-install-make-cvs -->

<sect3 id="compile-and-install-make-basic">
<title>Basic <command>make</command> Command Sequence</title>

<para>
Once the basic make system is set up you must decide which type of the &kdevelop; system you want to use. This is done in the following configure step which builds the actual <filename>Makefile</filename>s the <command>make</command> command will use.
</para>

<note><para>
You may drop the <option>--prefix</option> option in the following <command>configure</command> command lines if you want &kdevelop; be installed in the default &kde; directory. See the <link linkend="compile-and-install-options">Some notes on configure options</link> chapter for this.
</para></note>

<variablelist>
<varlistentry>
<term>A Debug-Compiled Version</term>
<listitem>
<para>
If you want to keep track of what your &kdevelop; application does at run-time you may build a debug-compiled version. Just command <command>configure</command> to do so:
</para>

<informalexample><simplelist><member>
  <prompt>~/kde3src/kdevelop&gt; </prompt>
  <userinput>./configure --enable-debug=full --prefix=</userinput>(where-your-kde3-is)
</member></simplelist></informalexample>
</listitem>
</varlistentry>

<varlistentry>
<term>A Release-Compiled Version</term>
<listitem>
<para>If you only want to use &kdevelop; as-is a (smaller and faster
running) release version suffices. <command>configure</command> defaults to
this.</para>

<informalexample><simplelist><member>
  <prompt>~/kde3src/kdevelop&gt; </prompt>
  <userinput>./configure --prefix=</userinput>(where-your-kde3-is)
</member></simplelist></informalexample>

<note>
<para>
If you want to build your own <link linkend="make-api">API documentation</link> for &kdevelop; you must include yet another option in the <command>configure</command> command:
</para>
<informalexample><simplelist>
  <member><prompt>~/kde3src/kdevelop&gt; </prompt>
  <userinput>./configure --</userinput>(options-as-above) <userinput>\</userinput></member> <member><userinput>--with-kdelibsdoxy-dir=$KDEDIR/share/doc/HTML/en/kdelibs-apidocs</userinput></member>
</simplelist></informalexample>
</note>
</listitem>
</varlistentry>

<varlistentry>
<term>Make and Install &kdevelop;</term>
<listitem>
<para>
<command>configure</command> will check the system and build some <filename>Makefile</filename>s according to what it found. The <command>make</command> command will use the main <filename>Makefile</filename> by default. Thus
</para>

<informalexample><simplelist><member>
  <prompt>~/kde3src/kdevelop&gt; </prompt>
  <userinput>make</userinput>
</member></simplelist></informalexample>
<para>
suffices. If necessary, now gain root user rights using the command
</para>
<informalexample><simplelist><member>
  <prompt>~/kde3src/kdevelop&gt; </prompt>
  <userinput>su</userinput>
</member></simplelist></informalexample>
<para>
and entering the root password. Then install the application:
</para>
<informalexample><simplelist><member>
  <prompt>~/kde3src/kdevelop&gt; </prompt>
  <userinput>make install</userinput>
</member></simplelist></informalexample>
<para>
That's all. If you installed &kdevelop; in the default &kde; directory you may now run the IDE. Otherwise some additional steps will be necessary as shown in the <link linkend="compile-and-install-options-dir">Non-default installation directory</link> section below.
</para>

<note>
  <para>
  In fact there usually will have been three &kdevelop;-based applications installed:
  </para>
  <itemizedlist>
    <listitem><para>The &kdevelop; IDE &mdash; this is the place where you will usually work.</para></listitem>
    <listitem><para>The stand-alone &kdevelop; Assistant documentation browser &mdash; isolates all the powerful documentation facilities of the &kdevelop; IDE in a separate tool. This comes in handy when you want to look up some programming documentation but do not want to start the full IDE.</para></listitem>
    <listitem><para>The &kdevelop; Designer &mdash; enhances the &Qt; User Interface Designer by &kde; specific elements and integrates nicely in the &kdevelop; IDE.</para></listitem>
  </itemizedlist>
</note>
</listitem>
</varlistentry>
</variablelist>


</sect3> <!-- compile-and-install-make-basic -->
</sect2> <!-- compile-and-install-make -->


<sect2 id="compile-and-install-options">
<title>Some Notes on <command>configure</command> Options</title>

<sect3 id="compile-and-install-options-dir">
<title>Non-default Installation Directory</title>

<indexterm zone="compile-and-install-options-dir">
  <primary>&kdevelop;</primary>
  <secondary>installation</secondary>
  <tertiary>non-default directory</tertiary></indexterm>
<indexterm zone="compile-and-install-options-dir">
  <primary>non-default directory</primary></indexterm>
<indexterm zone="compile-and-install-options-dir">
  <primary>KDEDIRS</primary></indexterm>
<indexterm zone="compile-and-install-options-dir">
  <primary>kbuildsycoca</primary></indexterm>

<para>
By default <command>configure</command> prepares the IDE to be installed in the default &kde; directory. This is necessary because &kdevelop; assumes direct access to some tools and parts which reside there. If want to use your own installation directory, you must tell <command>configure</command> this by the <option>--prefix</option> option:
</para>
<informalexample><simplelist><member>
  <prompt>~/kde3src/kdevelop&gt; </prompt>
  <userinput>./configure --prefix=</userinput>(where-your-kde3-is)
</member></simplelist></informalexample>
<para>
There is a caveat if you do so. You must provide a means for &kdevelop; to access the needed tools and parts in the &kde; directory when running. (You can still use the IDE without doing so, but with very restrained capabilities.)
</para>
<para>
Call up a shell and have the following commands executed before you start &kdevelop; at the shell prompt.
</para>

<note><para>
  <emphasis>Take care to use the plural:</emphasis> It is <quote><envar>KDEDIRS</envar></quote>, not just <quote><envar>KDEDIR</envar></quote>)
</para></note>

<informalexample><simplelist>
  <member>
    <prompt>~&gt; </prompt>
    <userinput>export KDEDIRS=/usr/local/kde:/opt/kde3</userinput>
  </member>
  <member>
    <prompt>~&gt; </prompt>
    <userinput>kbuildsycoca</userinput>
  </member>
  <member>
  (Now start &kdevelop;:)
  </member>
  <member>
    <prompt>~&gt; </prompt>
    <userinput>kdevelop</userinput>
  </member>
</simplelist></informalexample>

<note><simplelist>
  <member>The <envar>KDEDIRS</envar> environment variable must be set to the <emphasis>list of active &kde; directories</emphasis> in your system. We use</member>
  <member><filename class="directory">/usr/local/kde</filename>:<filename class="directory">/opt/kde3</filename></member>
  <member>as an example only.</member>
  <member>The <filename class="directory">/usr/local/kde</filename> directory may for instance contain an incomplete &kde; version you compiled for debug purposes, and the <filename class="directory">/opt/kde3</filename> directory may in addition contain the standard &kde; version from your distribution that is used for everyday work.</member>
</simplelist></note>

<para>
In a tcsh shell you must set the environment variables using:
</para>
<informalexample><simplelist><member>
    <prompt>~&gt; </prompt>
    <userinput>setenv KDEDIRS /usr/local/kde:/opt/kde3</userinput>
</member></simplelist></informalexample>
<para>
The <command>kbuildsycoca</command> command (<quote>build system control cache</quote>) looks around for libraries and caches their location and version, so that &kdevelop; can find them. The caveat is that it takes noticeable time&mdash;and it has to be run any time you call up the shell to start &kdevelop; from a non-default directory. You may want to put the above commands into a shell script to reduce the typing effort.
</para>
<para>
(You could as well put the lines in your <filename>.bashrc</filename> or <filename>.cshrc</filename> file, but this is not advisable as <command>kbuildsycoca</command> will then be run any time you call up the shell.)
</para>

<note><para>
The <command>kbuildsycoca</command> command does not run from within the root. You must call it from a non-root user. (But is <emphasis>not a very good idea</emphasis> after all to do software development from within the root!)
</para></note>
</sect3> <!-- compile-and-install-options-dir -->

<!-- ### put a sect3 with other configuration options here -->

</sect2> <!-- compile-and-install-options -->

</sect1> <!-- compile-and-install -->

<sect1 id="make-api">
<title>How to Obtain a &kdevelop; API Documentation</title>

<indexterm zone="make-api">
  <primary>API</primary>
  <secondary>&kdevelop;</secondary></indexterm>
<indexterm zone="make-api">
  <primary>&kdevelop;</primary>
  <secondary>API</secondary></indexterm>
<indexterm zone="make-api">
  <primary>compiling</primary>
  <secondary>&kdevelop;</secondary>
  <tertiary>API</tertiary></indexterm>
<indexterm zone="make-api">
  <primary>configure</primary>
  <secondary>&kdevelop; API</secondary></indexterm>

<para>
API is the short form of <quote>Application Program Interface</quote>. Actually such an API cotains a series of descriptions (&ie; calling conventions) by which an application program can access the operating system and other services. In our context, however, a broader definition was adopted. The API of a &kde; or &Qt; application is an abstract of the classes and methods interfaces, a synopsis to be used like a dictionary to navigate the sources.
</para>
<para>
There is a version of the most current API available at the <ulink url="http://www.kdevelop.org/HEAD/doc/api/html/index.html">KDevelop-Home website</ulink>. It will be automatically updated every 24 hours so you can keep up.
</para>
<para>
Alas, this version is best used read-only over the internet. If you do not always have internet access you may as well build your own API documentation from the &kdevelop; sources. To do so, you must tell the automake system where to find the KDELIBS API in your system. This is accomplished by the special option <option>--with-kdelibsdoxy-dir</option> in the <command>configure</command> command when you prepare to compile the &kdevelop; sources:
</para>

<informalexample><simplelist>
  <member>
    <prompt>~/kde3src/kdevelop&gt; </prompt>
    <userinput>./configure --</userinput>(options-as-usual)<userinput> \</userinput>
  </member>
  <member>
    <userinput>--with-kdelibsdoxy-dir=$KDEDIR/share/doc/HTML/en/kdelibs-apidocs</userinput>
  </member>
</simplelist></informalexample>

<para>
(<command>make</command> will replace the global <varname>$KDEDIR</varname> variable with the actual &kde; directory setting recorded therein.) Then issue a <command>make</command> command <link linkend="compile-and-install-make-basic">as usual</link>. After the &kdevelop; IDE has been built you have the option to build the API as well. For this you must issue
</para>
<informalexample><simplelist><member>
  <prompt>~/kde3src/kdevelop&gt; </prompt>
  <userinput>make apidocs</userinput>
</member></simplelist></informalexample>

<para>
This will build a <filename>Doxyfile</filename> in your &kdevelop; base directory which in turn will be processed by the <application>Doxygen</application> application to build quite a lot of <filename>.html</filename> API files. When this rather lengthy API building process (may last more than an hour on a slow system) finally comes to an end, you must install the API just like you have to install the &kdevelop; IDE itself. If necessary obtain superuser rights by
</para>

<informalexample><simplelist><member>
  <prompt>~/kde3src/kdevelop&gt; </prompt>
  <userinput>su</userinput>
</member></simplelist></informalexample>

<para>
and entering the root password. Then install the API files:
</para>

<informalexample><simplelist><member>
  <prompt>~/kde3src/kdevelop&gt; </prompt>
  <userinput>make install-apidox</userinput>
</member></simplelist></informalexample>

<para>
Once this is done, <command>make</command> will inform you about the directory where you can finally look at the API documentation's contents. Note this address, you can use it from  &konqueror; as well as from inside &kdevelop;, in case you have set up the &kdevelop; sources themselves as a project to work on.
</para>

<note><para>
You will most probably see a lot of warning and/or error messages during the API build run by <application>Doxygen</application>. It is best to ignore them, they are of interest to the &kdevelop; developers only. If the API generation ever comes to a successful end, the <filename>.html</filename> API files will be usable.
</para></note>

</sect1> <!-- make-api -->

</appendix> <!-- kdevelop-install -->
